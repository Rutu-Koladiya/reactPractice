{"ast":null,"code":"var _jsxFileName = \"D:\\\\reactPractice\\\\22-routing-project\\\\frontend\\\\src\\\\pages\\\\EventsPage.js\",\n  _s = $RefreshSig$();\nimport { useLoaderData,\n//json,\ndefer, Await } from \"react-router-dom\";\n// we can also render loader data in eventlist page\n// you can access loaded data with help of useLoaderData in any component on the same level or lower level\n\nimport EventsList from \"../components/EventsList\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction EventsPage() {\n  _s();\n  const {\n    events\n  } = useLoaderData();\n\n  // if (data.isError) {\n  //   return <p>{data.message}</p>\n  // }\n  // return (\n  //   <EventsList events={data} />\n  //   // <EventsList/>\n  // );\n\n  return /*#__PURE__*/_jsxDEV(Await, {\n    resolve: events\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 10\n  }, this);\n}\n_s(EventsPage, \"xTcuS98fsVcq20se00iLm8bDBmQ=\", false, function () {\n  return [useLoaderData];\n});\n_c = EventsPage;\nexport default EventsPage;\nasync function loadEvents() {\n  const response = await fetch(\"http://localhost:8080/events\");\n  if (!response.ok) {\n    // return { isError: true, message: 'Could not fetch events.' }\n    throw new Response(JSON.stringify({\n      message: \"could not fetch events.\"\n    }), {\n      status: 500\n    });\n\n    // only available when using react router v6\n    // throw json({message: 'could not fetch events.'}, {status: 500})\n  } else {\n    const resData = await response.json();\n    return resData.events;\n  }\n}\nexport function Loader() {\n  // sometime we wanna load page before the data is there and show some parts of the page already untill all the data is there, use defer\n\n  // but in react router v7+, not needed\n  return defer({\n    events: loadEvents()\n  });\n}\n_c2 = Loader;\nvar _c, _c2;\n$RefreshReg$(_c, \"EventsPage\");\n$RefreshReg$(_c2, \"Loader\");","map":{"version":3,"names":["useLoaderData","defer","Await","EventsList","jsxDEV","_jsxDEV","EventsPage","_s","events","resolve","fileName","_jsxFileName","lineNumber","columnNumber","_c","loadEvents","response","fetch","ok","Response","JSON","stringify","message","status","resData","json","Loader","_c2","$RefreshReg$"],"sources":["D:/reactPractice/22-routing-project/frontend/src/pages/EventsPage.js"],"sourcesContent":["import {\r\n  useLoaderData,\r\n  //json,\r\n  defer,\r\n  Await,\r\n} from \"react-router-dom\";\r\n// we can also render loader data in eventlist page\r\n// you can access loaded data with help of useLoaderData in any component on the same level or lower level\r\n\r\nimport EventsList from \"../components/EventsList\";\r\n\r\nfunction EventsPage() {\r\n  const { events } = useLoaderData();\r\n\r\n  // if (data.isError) {\r\n  //   return <p>{data.message}</p>\r\n  // }\r\n  // return (\r\n  //   <EventsList events={data} />\r\n  //   // <EventsList/>\r\n  // );\r\n\r\n  return <Await resolve={events}>\r\n\r\n  </Await>\r\n}\r\n\r\nexport default EventsPage;\r\n\r\nasync function loadEvents() {\r\n  const response = await fetch(\"http://localhost:8080/events\");\r\n\r\n  if (!response.ok) {\r\n    // return { isError: true, message: 'Could not fetch events.' }\r\n    throw new Response(JSON.stringify({ message: \"could not fetch events.\" }), {\r\n      status: 500,\r\n    });\r\n\r\n    // only available when using react router v6\r\n    // throw json({message: 'could not fetch events.'}, {status: 500})\r\n  } else {\r\n    const resData = await response.json();\r\n    return resData.events;\r\n  }\r\n}\r\n\r\nexport function Loader() {\r\n  // sometime we wanna load page before the data is there and show some parts of the page already untill all the data is there, use defer\r\n\r\n  // but in react router v7+, not needed\r\n  return defer({\r\n    events: loadEvents()\r\n  })\r\n}\r\n"],"mappings":";;AAAA,SACEA,aAAa;AACb;AACAC,KAAK,EACLC,KAAK,QACA,kBAAkB;AACzB;AACA;;AAEA,OAAOC,UAAU,MAAM,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElD,SAASC,UAAUA,CAAA,EAAG;EAAAC,EAAA;EACpB,MAAM;IAAEC;EAAO,CAAC,GAAGR,aAAa,CAAC,CAAC;;EAElC;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA,oBAAOK,OAAA,CAACH,KAAK;IAACO,OAAO,EAAED;EAAO;IAAAE,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAEvB,CAAC;AACV;AAACN,EAAA,CAdQD,UAAU;EAAA,QACEN,aAAa;AAAA;AAAAc,EAAA,GADzBR,UAAU;AAgBnB,eAAeA,UAAU;AAEzB,eAAeS,UAAUA,CAAA,EAAG;EAC1B,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,CAAC;EAE5D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;IAChB;IACA,MAAM,IAAIC,QAAQ,CAACC,IAAI,CAACC,SAAS,CAAC;MAAEC,OAAO,EAAE;IAA0B,CAAC,CAAC,EAAE;MACzEC,MAAM,EAAE;IACV,CAAC,CAAC;;IAEF;IACA;EACF,CAAC,MAAM;IACL,MAAMC,OAAO,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;IACrC,OAAOD,OAAO,CAAChB,MAAM;EACvB;AACF;AAEA,OAAO,SAASkB,MAAMA,CAAA,EAAG;EACvB;;EAEA;EACA,OAAOzB,KAAK,CAAC;IACXO,MAAM,EAAEO,UAAU,CAAC;EACrB,CAAC,CAAC;AACJ;AAACY,GAAA,GAPeD,MAAM;AAAA,IAAAZ,EAAA,EAAAa,GAAA;AAAAC,YAAA,CAAAd,EAAA;AAAAc,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}